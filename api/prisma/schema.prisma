// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]

}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String?
  avatar     String?
  googleId   String?     
  createdAt  DateTime    @default(now())
  posts      Post[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  postDetails PostDetails?
  savedPosts SavedPost[]
}

enum Type {
  SALE
  RENT
}

enum Property {
  APARTMENT
  HOUSE
}



model PostDetails {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  description String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  postId     String  @unique @db.ObjectId
  post       Post    @relation(fields: [postId], references: [id])
}

model SavedPost {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  postId     String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
  post       Post    @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}


model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  seenBy    String[] @db.ObjectId
  createdAt DateTime @default(now())
}
